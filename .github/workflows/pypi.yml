name: pypi

on:
  workflow_dispatch:
  push:
    tags:
      - "*"

jobs:
  version_bump:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump_version.outputs.NEW_VERSION }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed to push tags

      - name: Install Python & Commitizen
        run: |
          pip install commitizen poetry

      - name: Bump version with Commitizen
        id: bump_version
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          cz bump --yes
          NEW_VERSION=$(poetry version -s)
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit version bump
        run: |
          git add pyproject.toml
          git commit -m "chore(release): bump version to ${{ env.NEW_VERSION }}"
          git tag v${{ env.NEW_VERSION }}
          git push origin main --tags

  build_wheels:
    name: Build Wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install build
      - name: Build wheel
        run: python -m build --wheel
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: dist/*.whl

  build_sdist:
    name: Build Source Distribution
    runs-on: ubuntu-latest
    needs: build_wheels
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install build
      - name: Build source distribution
        run: python -m build --sdist
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Verify wheels before publishing
        run: pip install twine && twine check dist/*
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.2
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
