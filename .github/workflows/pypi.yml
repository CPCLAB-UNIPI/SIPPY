name: pypi

on:
  workflow_dispatch:
  push:
    tags:
      - "*"

jobs:
  version_bump:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump_version.outputs.NEW_VERSION }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed to push tags

      - name: Install Python & Commitizen
        run: |
          pip install commitizen poetry

      - name: Bump version with Commitizen
        id: bump_version
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          cz bump --yes
          NEW_VERSION=$(poetry version -s)
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit version bump
        run: |
          git add pyproject.toml
          git commit -m "chore(release): bump version to ${{ env.NEW_VERSION }}"
          git tag v${{ env.NEW_VERSION }}
          git push origin main --tags

  build_linux_wheels:
    name: Build ${{ matrix.linux_tag }} wheels with cp${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        linux_tag: ["manylinux", "musllinux"]
        python-version: ["310", "311", "312", "313"]
    steps:
      - uses: actions/checkout@main
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      - name: Install dependencies
        run: poetry install --no-dev
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.22.0
        timeout-minutes: 720
        env:
          CIBW_BUILD: "cp${{ matrix.python-version }}-${{ matrix.linux_tag }}_*"
          CIBW_ARCHS_LINUX: "x86_64 i686 aarch64"
          CIBW_SKIP: "*-musllinux_i686"
          CIBW_BEFORE_BUILD: >
            sudo apt-get update -qq && sudo apt-get install -y libopenblas-dev coinor-libipopt-dev build-essential cmake ninja-build
      - uses: actions/upload-artifact@main
        with:
          name: artifact-${{ matrix.linux_tag }}-cp${{ matrix.python-version }}
          path: ./wheelhouse/*.whl

  build_macos_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-13, macos-14]
    steps:
      - uses: actions/checkout@main
      - name: Install dependencies
        run: poetry install --no-dev
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.22.0
        timeout-minutes: 720
        env:
          CIBW_BUILD: "cp310-* cp311-* cp312-* cp313-*"
          CIBW_ARCHS_MACOS: "universal2"
          CIBW_BEFORE_BUILD: >
            brew update -q && brew install ninja gfortran openblas
      - uses: actions/upload-artifact@main
        with:
          name: artifact-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  build_windows_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    continue-on-error: true  # TODO: for now, Window builds are failing
    strategy:
      matrix:
        os: [windows-2019, windows-2022]
    steps:
      - uses: actions/checkout@main
      - name: Install dependencies
        run: poetry install --no-dev
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.22.0
        timeout-minutes: 720
        env:
          CIBW_BUILD: "cp310-* cp311-* cp312-* cp313-*"
          CIBW_ARCHS_WINDOWS: "AMD64 x86"
          CIBW_BEFORE_BUILD: >
            choco install -y cmake ninja && refreshenv &&
            C:\msys64\usr\bin\bash -lc "pacman -Sy --noconfirm mingw-w64-x86_64-gcc mingw-w64-x86_64-openblas"
      - uses: actions/upload-artifact@main
        with:
          name: artifact-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    # Can't use more than 12 jobs in parallel
    needs: [build_linux_wheels, build_macos_wheels, build_windows_wheels]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - name: Install dependencies
        run: poetry install --no-dev
      - name: Build source distribution
        run: poetry build
      - uses: actions/upload-artifact@main
        with:
          name: artifact-sdist
          path: dist/*.tar.gz

  merge_artifacts:
    runs-on: ubuntu-latest
    needs:
      [
        build_linux_wheels,
        build_macos_wheels,
        build_windows_wheels,
        build_sdist,
      ]
    steps:
      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@main
        with:
          name: artifact
          pattern: artifact-*

  upload_pypi:
    needs: merge_artifacts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@main
        with:
          name: artifact
          path: dist
      - name: Verify wheels before publishing
        run: pip install twine && twine check dist/*
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.2
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
