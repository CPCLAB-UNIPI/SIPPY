name: CI

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - main

jobs:
  setup-environment:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@main

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y libopenblas-dev coinor-libipopt-dev build-essential cmake ninja-build

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install ninja gfortran openblas
          echo "FC=$(brew --prefix gfortran)/bin/gfortran" >> $GITHUB_ENV

      - name: Set up Xcode
        if: runner.os == 'macOS'
        uses: maxim-lobanov/setup-xcode@v1

      - name: Install system dependencies MSYS2 (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2

      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install -y cmake ninja
          refreshenv
          C:\msys64\usr\bin\bash -lc "pacman -Sy --noconfirm mingw-w64-x86_64-gcc mingw-w64-x86_64-openblas"
          echo "CMAKE_GENERATOR=Ninja" >> $GITHUB_ENV

      - name: Cache installed dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.local
            C:\msys64\mingw64
          key: ${{ runner.os }}-dependencies-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-dependencies-

  build:
    needs: setup-environment # Runs only after dependencies are installed
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@main

      - name: Restore cached dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.local
            C:\msys64\mingw64
          key: ${{ runner.os }}-dependencies-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-dependencies-

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@main
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi --no-root

      - name: Run tests
        run: poetry run pytest -m "not datasets" --durations=10
