name: CI

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - main

jobs:
  setup-os:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@main

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y libopenblas-dev coinor-libipopt-dev build-essential cmake ninja-build

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install ninja gfortran openblas
          echo "FC=$(brew --prefix gfortran)/bin/gfortran" >> $GITHUB_ENV

      - name: Set up Xcode
        if: runner.os == 'macOS'
        uses: maxim-lobanov/setup-xcode@v1

      - name: Install system dependencies MSYS2 (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          install: |
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-openblas
          release: false

      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install -y cmake ninja
          refreshenv
          echo "CMAKE_GENERATOR=Ninja" >> $GITHUB_ENV

      - name: Upload artifacts
        uses: actions/upload-artifact@main
        with:
          name: deps-${{ matrix.os }}
          path: |
            /usr/local/lib
            /usr/local/include
            /opt/homebrew/lib
            /opt/homebrew/include
            C:/msys64/mingw64/lib
            C:/msys64/mingw64/include
          # if-no-files-found: ignore

  build:
    needs: setup-os # Runs only after dependencies are installed
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@main

      - name: Download artifacts
        uses: actions/download-artifact@main
        with:
          name: deps-${{ matrix.os }}
          path: deps

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@main
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@main
        with:
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Cache Poetry virtual environment
        id: cache-poetry
        uses: actions/cache@v3
        with:
          path: .venv
          key: poetry-${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            poetry-${{ matrix.os }}-${{ matrix.python-version }}-

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi --no-root

      - name: Run tests
        run: poetry run pytest -m "not datasets" --durations=10
